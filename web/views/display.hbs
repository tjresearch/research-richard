<!DOCTYPE html>
<html>
    <head>
        <link rel="stylesheet" type="text/css" href="css/style.css" />
        <meta charset="utf-8">
        <title>Decentralized Traffic Detection Web Interface</title>
    </head>
    <body>
        <!-- <h2>Displaying {{global.NUM_TIME_STEP}} frames from {{meta.outputFolder}}</h2> -->
        <h2>Simulation Displayer</h2>

        <div class="frame">
            <h3 id="frame-display">Frame: 0<h3>

            <input type="range" min="0" max="1" value="0" id="frame-slider" list="frame-slider-ticks">
            <datalist id="frame-slider-ticks">
            </datalist>
            <br>
            <input id="frame-play" type="button" value="Off"><br>
        </div>

        <canvas id="roadMap" width="100" height="100"></canvas>


        <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.2.4/jquery.min.js"></script>

        <script type="text/javascript">
            var simulationData = {
                "meta": {},
                "global": {},
                "frames": [],
                "loaded": [],
            };

            // meta data
            simulationData.meta.simulationName = {{{json simulationName}}};
            simulationData.meta.simulationIndex = {{{json simulationIndex}}};
            simulationData.meta.outputFolder = "./../output/" + simulationData.meta.simulationName + simulationData.meta.simulationIndex + "/";
            simulationData.meta.globalFile = simulationData.meta.outputFolder + simulationData.meta.simulationName + "_global.txt";

            // global data
            loadGlobalRequest()

            // frames and loaded
            for (var i = 0; i < simulationData.global.NUM_TIME_STEP; i++) {
                simulationData.frames.push({});
                simulationData.loaded.push(false);

                // pre-loaded
                // loadFrameRequest(index);
            }

            var frameSlider = document.getElementById("frame-slider");
            var frameSliderList = document.getElementById("frame-slider-ticks");
            var frameDisplay = document.getElementById("frame-display");
            var framePlay = document.getElementById("frame-play");

            // color constants
            var RED   = "#FF0000";
            var GREEN = "#00FF00";
            var BLUE  = "#0000FF";
            var GRAY  = "#808080";
            var BLACK = "#000000";

            var vertexRadius = 10;
            var edgeWidth = 10;

            var view = {
                "width": -1,
                "height": -1,
                "currentFrame": -1,
            };

            var canvas = document.getElementById('roadMap');
            var	context = canvas.getContext('2d');

            canvas.width = screen.width * 0.9;
            canvas.height = screen.height * 0.9;

            function loadFrameRequest (index) {
                if (!simulationData.loaded[index]) {
                    console.log("Loading frame " + index);
                    var frameFile = simulationData.meta.outputFolder + simulationData.meta.simulationName + "_" + index.toString().padStart(6, "0") + ".data";
                    var params = {
                        "url": "load_frame_worker",
                        "type": "get",
                        "data": {"frameFile": frameFile},
                        "success": loadFrameResponse,
                    };
                    $.ajax(params);
                } else {
                    displayFrame(index);
                }
            }

            function loadFrameResponse (responseText) {
                var parsed = JSON.parse(responseText);
                simulationData.frames[parsed.frame] = parsed;
                simulationData.loaded[parsed.frame] = true;
                displayFrame(parsed.frame);
            }

            function loadGlobalRequest () {
                var params = {
                    "url": "load_global_worker",
                    "type": "get",
                    "data": {"globalFile": simulationData.meta.globalFile},
                    "success": loadGlobalResponse,
                };
                $.ajax(params);
            }

            function loadGlobalResponse (responseText) {
                simulationData.global = JSON.parse(responseText);
                initFrameSlider();
            }

            function initFrameSlider() {
                frameSlider.max = simulationData.global.NUM_TIME_STEP - 1;

                var tickIntervals = 4;
                for (var i = 0; i <= tickIntervals; i++) {
                   var option = document.createElement("option");
                   option.value = Math.trunc(i * frameSlider.max / tickIntervals);
                   frameSliderList.appendChild(option);
                }

                frameSlider.oninput = function() {
                    view.currentFrame = this.value;
                    loadFrameRequest(this.value);
                }

                framePlay.onclick = function() {
                    if (this.value == "On") {
                        this.value = "Off";
                    } else if (this.value == "Off") {
                        this.value = "On";
                    }
                };

                loadFrameRequest(frameSlider.value);
            }

            function displayFrame (frameNumber) {
                console.log("Displaying frame " + frameNumber);

                view.currentFrame = frameNumber;

                var frameData = simulationData.frames[view.currentFrame];
                for (var i = 0; i < frameData.graphVertices.length; i++) {
                    view.width = Math.max(view.width, frameData.graphVertices[i].x);
                    view.height = Math.max(view.height, frameData.graphVertices[i].y);
                }
                if (view.width / canvas.width > view.height / canvas.height) {
                    view.height = canvas.height * view.width / canvas.width;
                } else {
                    view.width = canvas.width * view.height / canvas.height;
                }

                frameDisplay.innerHTML = "Frame: " + view.currentFrame;

                context.fillStyle = GREEN;
                context.fillRect(0, 0, canvas.width, canvas.height);

                for (var i = 0; i < frameData.graphVertices.length; i++) {
                	drawVertex(frameData.graphVertices[i]);
                }
            }

            function scaleToView (obj) {
                return {
                    "x": obj.x * (canvas.width / view.width),
                    "y": obj.y * (canvas.height / view.height),
                }
            }

            function drawEdge (e) {
                context.fillStyle = '#f00';
                context.beginPath();
                for (var i = 0; i < points.size(); i++) {

                }
                context.moveTo(0, 0);
                context.lineTo(100,50);
                context.lineTo(50, 100);
                context.lineTo(0, 90);
                context.closePath();
            	context.fillStyle = BLUE;
                context.fill();
            	context.lineWidth = 2;
            	context.strokeStyle = BLACK;
            	context.stroke();
            }

            function drawVertex (v) {
                var loc = scaleToView(v);
            	context.beginPath();
            	context.arc(loc.x, loc.y, vertexRadius, 0, 2 * Math.PI, false);
                context.closePath();
            	context.fillStyle = BLUE;
            	context.fill();
            	context.lineWidth = 2;
            	context.strokeStyle = BLACK;
            	context.stroke();
            }

            setInterval(function () {
                if (framePlay.value == "On") {
                    if (view.currentFrame + 1 == simulationData.global.NUM_TIME_STEP) {
                        framePlay.value = "Off";
                    } else {
                        view.currentFrame++;
                        frameSlider.value = view.currentFrame;
                        loadFrameRequest(view.currentFrame);
                    }
                }
            }, 10);

        </script>
        <!-- <script type="text/javascript" src="js/initDisplay.js"></script> -->

    </body>
</html>
