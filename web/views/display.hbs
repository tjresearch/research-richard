<!DOCTYPE html>
<html>
    <head>
        <link rel="stylesheet" type="text/css" href="css/style.css" />
        <meta charset="utf-8">
        <title>Decentralized Traffic Detection Web Interface</title>
    </head>
    <body>
        <!-- <h2>Displaying {{global.NUM_TIME_STEP}} frames from {{meta.outputFolder}}</h2> -->
        <h2>Simulation Displayer</h2>

        <div class="frame">
            <h3 id="frame-display">Frame:<h3>

            <input type="range" min="0" max="1" value="0" id="frame-slider" list="frame-slider-ticks">
            <datalist id="frame-slider-ticks">
            </datalist>
            <br>
            <h3 id="frame-speed">Frame Speed:<h3>
            <input id="frame-play" type="button" value="Off"><br>
            <input type="range" min="0" max="7" value="4" id="frame-speed-slider">
        </div>

        <canvas id="roadMap" width="100" height="100"></canvas>


        <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.2.4/jquery.min.js"></script>

        <script type="text/javascript">
            var data = {
                "meta": {},
                "global": {},
                "frames": [],
                "loaded": [],
            };

            // meta data
            data.meta.simulationName = {{{json simulationName}}};
            data.meta.simulationIndex = {{{json simulationIndex}}};
            data.meta.outputFolder = "./../output/" + data.meta.simulationName + data.meta.simulationIndex + "/";
            data.meta.globalFile = data.meta.outputFolder + data.meta.simulationName + "_global.txt";

            // global data
            loadGlobalRequest();

            // frames and loaded
            for (var i = 0; i < data.global.NUM_TIME_STEP; i++) {
                data.frames.push({});
                data.loaded.push(false);

                // pre-loaded
                // loadFrameRequest(index);
            }

            var frameDisplay = document.getElementById("frame-display");
            var frameSpeed = document.getElementById("frame-speed");
            var frameSlider = document.getElementById("frame-slider");
            var frameSliderList = document.getElementById("frame-slider-ticks");
            var framePlay = document.getElementById("frame-play");
            var frameSpeedSlider = document.getElementById("frame-speed-slider");

            // color constants
            var RED   = "#FF0000";
            var GREEN = "#00FF00";
            var BLUE  = "#0000FF";
            var GRAY  = "#808080";
            var BLACK = "#000000";
            var WHITE = "#FFFFFF";

            var vertexRadius = 15;
            var edgeWidth = 15;
            var carRadius = 5;

            var view = {
                "width": -1,
                "height": -1,
                "currentFrame": -1,
            };

            var canvas = document.getElementById('roadMap');
            var	context = canvas.getContext('2d');

            canvas.width = screen.width * 0.9;
            canvas.height = screen.height * 0.9;

            function loadFrameRequest (index) {
                if (!data.loaded[index]) {
                    console.log("Loading frame " + index);
                    var frameFile = data.meta.outputFolder + data.meta.simulationName + "_" + index.toString().padStart(6, "0") + ".data";
                    var params = {
                        "url": "load_frame_worker",
                        "type": "get",
                        "data": {"frameFile": frameFile},
                        "success": loadFrameResponse,
                    };
                    $.ajax(params);
                } else {
                    displayFrame(index);
                }
            }

            function loadFrameResponse (responseText) {
                var parsed = JSON.parse(responseText);
                data.frames[parsed.frame] = parsed;
                data.loaded[parsed.frame] = true;
                displayFrame(parsed.frame);
            }

            function loadGlobalRequest () {
                var params = {
                    "url": "load_global_worker",
                    "type": "get",
                    "data": {"globalFile": data.meta.globalFile},
                    "success": loadGlobalResponse,
                };
                $.ajax(params);
            }

            function loadGlobalResponse (responseText) {
                data.global = JSON.parse(responseText);
                initFrameSlider();
            }

            function initFrameSlider() {
                frameSlider.max = data.global.NUM_TIME_STEP - 1;
                frameSlider.oninput = function() {
                    view.currentFrame = this.value;
                    loadFrameRequest(this.value);
                }

                var tickIntervals = 4;
                for (var i = 0; i <= tickIntervals; i++) {
                   var option = document.createElement("option");
                   option.value = Math.trunc(i * frameSlider.max / tickIntervals);
                   frameSliderList.appendChild(option);
                }

                framePlay.onclick = function() {
                    if (this.value == "On") {
                        frameSpeed.style.color = GRAY;
                        this.value = "Off";
                    } else if (this.value == "Off") {
                        frameSpeed.style.color = BLACK;
                        timeSinceUpdate = 0;
                        this.value = "On";
                    }
                };

                this.value = "Off";
                frameSpeed.style.color = GRAY;
                frameSpeed.innerHTML = "Frame Speed: " + frameSpeedSliderValues[frameSpeedSlider.value];

                frameSpeedSlider.oninput = function() {
                    frameSpeed.innerHTML = "Frame Speed: " + frameSpeedSliderValues[this.value];
                };

                loadFrameRequest(frameSlider.value);
            }

            function displayFrame (frameNumber) {
                console.log("Displaying frame " + frameNumber);

                view.currentFrame = frameNumber;

                var frameData = data.frames[view.currentFrame];
                for (var i = 0; i < frameData.graphVertices.length; i++) {
                    view.width = Math.max(view.width, frameData.graphVertices[i].x);
                    view.height = Math.max(view.height, frameData.graphVertices[i].y);
                }
                if (view.width / canvas.width > view.height / canvas.height) {
                    view.height = canvas.height * view.width / canvas.width;
                } else {
                    view.width = canvas.width * view.height / canvas.height;
                }

                frameDisplay.innerHTML = "Frame: " + view.currentFrame;

                context.fillStyle = WHITE;
                context.fillRect(0, 0, canvas.width, canvas.height);

                for (var i = 0; i < frameData.graphEdges.length; i++) {
                	drawEdge(frameData.graphEdges[i]);
                }

                for (var i = 0; i < frameData.graphVertices.length; i++) {
                	drawVertex(frameData.graphVertices[i]);
                }

                for (var i = 0; i < frameData.graphCars.length; i++) {
                	drawCar(frameData.graphCars[i]);
                }
            }

            function scaleToView (obj) {
                return {
                    "x": obj.x * (canvas.width / view.width),
                    "y": obj.y * (canvas.height / view.height),
                }
            }

            function drawCar (car) {
                var loc = scaleToView(car);

            	context.beginPath();
            	context.arc(loc.x, loc.y, carRadius, 0, 2 * Math.PI, false);
                context.closePath();

            	context.fillStyle = RED;
            	context.fill();

            	context.lineWidth = 1;
            	context.strokeStyle = BLACK;
            	context.stroke();
            }

            function drawEdge (e) {
                var loc1 = scaleToView(data.frames[view.currentFrame].graphVertices[e.start]);
                var loc2 = scaleToView(data.frames[view.currentFrame].graphVertices[e.end]);
                var dx = loc2.x - loc1.x;
                var dy = loc2.y - loc1.y;
                var magnitude = Math.sqrt(dx * dx + dy * dy);
                var x_offset = -dy / magnitude * edgeWidth / 2;
                var y_offset = -dx / magnitude * edgeWidth / 2;

                context.beginPath();
                context.moveTo(loc1.x + x_offset, loc1.y + y_offset);
                context.lineTo(loc1.x - x_offset, loc1.y - y_offset);
                context.lineTo(loc2.x - x_offset, loc2.y - y_offset);
                context.lineTo(loc2.x + x_offset, loc2.y + y_offset);
                context.lineTo(loc1.x + x_offset, loc1.y + y_offset);
                context.closePath();

            	context.fillStyle = GRAY;
                context.fill();

            	context.lineWidth = 1;
            	context.strokeStyle = BLACK;
            	context.stroke();
            }

            function drawVertex (v) {
                var loc = scaleToView(v);
            	context.beginPath();
            	context.arc(loc.x, loc.y, vertexRadius, 0, 2 * Math.PI, false);
                context.closePath();
            	context.fillStyle = BLUE;
            	context.fill();
            	context.lineWidth = 1;
            	context.strokeStyle = BLACK;
            	context.stroke();
            }

            var intervalTime = 10;
            var frameSpeedSliderValues = [0.5, 1, 2, 5, 10, 25, 50, 100]; // frames per second
            var timeSinceUpdate = 0;
            setInterval(function () {
                if (framePlay.value == "On") {
                    timeSinceUpdate += intervalTime;
                    var frameChange = Math.trunc(timeSinceUpdate / (1000 / frameSpeedSliderValues[frameSpeedSlider.value]));
                    if (frameChange == 0) {
                        return;
                    }
                    var nextFrame = view.currentFrame + frameChange;
                    if (nextFrame >= data.global.NUM_TIME_STEP) {
                        if (view.currentFrame + 1 < data.global.NUM_TIME_STEP) {
                            view.currentFrame = data.global.NUM_TIME_STEP - 1;
                            frameSlider.value = view.currentFrame;
                            loadFrameRequest(view.currentFrame);
                        }

                        framePlay.value = "Off";
                        frameSpeed.style.color = GRAY;
                    } else {
                        view.currentFrame++;
                        frameSlider.value = view.currentFrame;
                        loadFrameRequest(view.currentFrame);
                        timeSinceUpdate -= frameChange * (1000 / frameSpeedSliderValues[frameSpeedSlider.value]);
                    }
                }
            }, intervalTime);

        </script>
        <!-- <script type="text/javascript" src="js/initDisplay.js"></script> -->

    </body>
</html>
